AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >-
  SAM template for Healthcare AI on AWS â€” deploys Bedrock summarizer Lambda,
  API Gateway endpoint, and DynamoDB table in one stack.
Parameters:
  NamePrefix:
    Type: String
    Default: "demo"

Globals:
  Function:
    Timeout: 30
    Runtime: python3.11

Resources:
  BedrockApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${NamePrefix}-BedrockSummarizerApi"
      StageName: Prod
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: !Sub "${NamePrefix} BedrockSummarizer API"
          version: 1.0.0
        paths:
          /:
            get:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RootFunction.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
            options:
              responses:
                '200':
                  description: Default CORS response
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                    Access-Control-Allow-Methods:
                      schema:
                        type: string
                    Access-Control-Allow-Headers:
                      schema:
                        type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "' * '"
                      method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
          /summarize:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BedrockFunction.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
            options:
              responses:
                '200':
                  description: Default CORS response
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                    Access-Control-Allow-Methods:
                      schema:
                        type: string
                    Access-Control-Allow-Headers:
                      schema:
                        type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "' * '"
                      method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
        components: {}

  PatientReports:
    Type: AWS::DynamoDB::Table
    Properties:
      # Let CloudFormation generate the physical table name to avoid cross-stack collisions
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PatientID
          AttributeType: S
        - AttributeName: ReportID
          AttributeType: S
      KeySchema:
        - AttributeName: PatientID
          KeyType: HASH
        - AttributeName: ReportID
          KeyType: RANGE

  BedrockFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: bedrock_lambda.lambda_handler
      CodeUri: ../lambda/
      MemorySize: 128
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref BedrockApi
            Path: /summarize
            Method: post
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref PatientReports
          BEDROCK_MODEL_ID: amazon.titan-text-express-v1
      # Use a dedicated IAM role with a minimal inline policy suitable for portfolio/demo
      Role: !GetAtt BedrockFunctionRole.Arn

  RootFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: root_handler.lambda_handler
      CodeUri: ../lambda/
      MemorySize: 128
      Events:
        RootGet:
          Type: Api
          Properties:
            RestApiId: !Ref BedrockApi
            Path: /
            Method: get
      Environment:
        Variables:
          DUMMY: "1"
      Role: !GetAtt BedrockFunctionRole.Arn

  BedrockFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: BedrockLambdaInlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: Logs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Sid: DynamoDBAccess
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                # Reference the table ARN dynamically so the policy remains correct even when
                # CloudFormation generates the physical table name.
                Resource:
                  - !GetAtt PatientReports.Arn
              - Sid: BedrockCalls
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: '*'

Outputs:
  ApiId:
    Description: "API Gateway RestApi Id"
    Value: !Ref BedrockApi

  ApiEndpoint:
    Description: "Invoke URL for summarize endpoint"
    Value: !Sub "https://${BedrockApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/summarize"

  LambdaFunctionArn:
    Description: "BedrockSummarizer Lambda ARN"
    Value: !GetAtt BedrockFunction.Arn

  DynamoDBTableName:
    Description: "DynamoDB table name"
    Value: !Ref PatientReports

  BedrockFunctionRoleArn:
    Description: "IAM Role ARN for Bedrock Lambda"
    Value: !GetAtt BedrockFunctionRole.Arn


